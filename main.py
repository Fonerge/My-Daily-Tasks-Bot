import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import sqlite3
import datetime
import pytz
from apscheduler.schedulers.background import BackgroundScheduler
from flask import Flask
import threading

API_TOKEN = '8181951037:AAFkmw8bJNC7Uo2gLoxaPO9myMolpO6Qp2o'
bot = telebot.TeleBot(API_TOKEN)

# –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
TIMEZONE = pytz.timezone('Europe/Istanbul')  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ä–µ–≥–∏–æ–Ω

# Flask-—Å–µ—Ä–≤–µ—Ä
app = Flask(__name__)

@app.route('/')
def index():
    return 'OK'

# –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_flask():
    app.run(host="0.0.0.0", port=8080)

threading.Thread(target=run_flask).start()

# –ë–∞–∑–∞
conn = sqlite3.connect('bot.db', check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    xp INTEGER DEFAULT 0
)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS task_log (
    user_id INTEGER,
    task_time TEXT,
    status TEXT,
    date TEXT
)''')
conn.commit()

# –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏ (–≤—Ä–µ–º—è, —Ç–µ–∫—Å—Ç)
tasks = [
    ("09:05", "–¢—ã –ø—Ä–æ—Å–Ω—É–ª—Å—è? –ò–¥–∏ –≤ —Ç—É–∞–ª–µ—Ç, –ø–µ–π –≤–æ–¥—É –∏ –∫–æ—Ñ–µ."),
    ("09:30", "–î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞."),
    ("09:45", "–û—Å–≤–µ–∂–∞—é—â–∏–π –¥—É—à."),
    ("10:15", "–ì–æ—Ç–æ–≤—å –∑–∞–≤—Ç—Ä–∞–∫."),
    ("11:00", "–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏."),
    ("13:00", "–ü–µ—Ä–µ—Ä—ã–≤, –∫—É—à–∞–µ–º –∏–ª–∏ –≥–æ—Ç–æ–≤–∏–º."),
    ("14:00", "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å."),
    ("16:00", "–°–º–æ—Ç—Ä–∏–º –¥–µ–ª–∞ –ø–æ –¥—Ä—É–≥–∏–º –∑–∞–¥–∞—á–∞–º."),
    ("18:00", "–£—á–∏–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π."),
    ("20:00", "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–∞—Ä—Ç–∏—Ä—É, –µ–¥—É, –∫–æ—à–∞—á–∏–π –ª–æ—Ç–æ–∫."),
    ("22:30", "–ú–æ–∂–Ω–æ YouTube, –∫–∏–Ω–æ –∏–ª–∏ –∏–≥—Ä—ã üéÆ")
]

# –ö–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    cursor.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
    conn.commit()
    bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ. –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –∑–∞–¥–∞—á–∞—Ö!")

@bot.message_handler(commands=['profile'])
def profile(message):
    user_id = message.chat.id
    today = datetime.datetime.now(TIMEZONE).strftime('%Y-%m-%d')
    cursor.execute("SELECT xp FROM users WHERE user_id = ?", (user_id,))
    xp = cursor.fetchone()[0]
    cursor.execute("SELECT task_time FROM task_log WHERE user_id = ? AND date = ? AND status IS NULL", (user_id, today))
    pending = cursor.fetchall()
    pending_list = [t[0] for t in pending]
    text = f"üåü XP: {xp}\nüìÖ –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–¥–∞—á —Å–µ–≥–æ–¥–Ω—è: {len(pending_list)}\n\n‚è≥ –ó–∞–¥–∞—á–∏:\n" + '\n'.join(pending_list)
    bot.send_message(user_id, text)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á
def send_task(user_id, task_time, text):
    date = datetime.datetime.now(TIMEZONE).strftime('%Y-%m-%d')
    cursor.execute("SELECT * FROM task_log WHERE user_id=? AND task_time=? AND date=?", (user_id, task_time, date))
    if not cursor.fetchone():
        cursor.execute("INSERT INTO task_log (user_id, task_time, date) VALUES (?, ?, ?)", (user_id, task_time, date))
        conn.commit()
        markup = InlineKeyboardMarkup()
        markup.row(
            InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done|{task_time}"),
            InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ", callback_data=f"skip|{task_time}")
        )
        bot.send_message(user_id, f"üïí {task_time}\n{text}", reply_markup=markup)

# –ö–æ–ª–±—ç–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    user_id = call.message.chat.id
    data = call.data.split('|')
    action, task_time = data[0], data[1]
    date = datetime.datetime.now(TIMEZONE).strftime('%Y-%m-%d')

    if action == 'done':
        cursor.execute("UPDATE task_log SET status = 'done' WHERE user_id=? AND task_time=? AND date=?", (user_id, task_time, date))
        cursor.execute("UPDATE users SET xp = xp + 10 WHERE user_id=?", (user_id,))
        bot.answer_callback_query(call.id, f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ! +10 XP.")
    elif action == 'skip':
        cursor.execute("UPDATE task_log SET status = 'skip' WHERE user_id=? AND task_time=? AND date=?", (user_id, task_time, date))
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ.")
    conn.commit()

# –û—Ç—á—ë—Ç –≤ –∫–æ–Ω—Ü–µ –¥–Ω—è
def send_daily_report():
    today = datetime.datetime.now(TIMEZONE).strftime('%Y-%m-%d')
    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()
    for (user_id,) in users:
        cursor.execute("SELECT COUNT(*) FROM task_log WHERE user_id=? AND date=? AND status='done'", (user_id, today))
        done = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM task_log WHERE user_id=? AND date=?", (user_id, today))
        total = cursor.fetchone()[0]
        bot.send_message(user_id, f"üìä –ò—Ç–æ–≥–∏ –∑–∞ {today}:\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {done}/{total}\nüåü XP –æ–±–Ω–æ–≤–ª—ë–Ω!")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
def schedule_all():
    scheduler = BackgroundScheduler(timezone=TIMEZONE)
    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()

    for user_id, in users:
        for task_time, text in tasks:
            hour, minute = map(int, task_time.split(":"))
            scheduler.add_job(send_task, 'cron', hour=hour, minute=minute, args=[user_id, task_time, text])

    # –û—Ç—á—ë—Ç –≤–µ—á–µ—Ä–æ–º
    scheduler.add_job(send_daily_report, 'cron', hour=23, minute=59)
    scheduler.start()

# –°—Ç–∞—Ä—Ç
schedule_all()
bot.infinity_polling()
