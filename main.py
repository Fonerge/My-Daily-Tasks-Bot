import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import sqlite3
import datetime
import threading
import time

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
API_TOKEN = '8181951037:AAFkmw8bJNC7Uo2gLoxaPO9myMolpO6Qp2o'
CHAT_ID = None  # —É—Å—Ç–∞–Ω–æ–≤–∏–º –ø–æ—Å–ª–µ /start
bot = telebot.TeleBot(API_TOKEN)

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ===
conn = sqlite3.connect('bot_db.sqlite', check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    xp INTEGER DEFAULT 0
)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS task_results (
    user_id INTEGER,
    task_time TEXT,
    status TEXT,
    date TEXT
)''')
conn.commit()

# === –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á ===
tasks = [
    ("09:05", "–¢—ã –ø—Ä–æ—Å–Ω—É–ª—Å—è? –ò–¥–∏ –≤ —Ç—É–∞–ª–µ—Ç, –ø–µ–π –≤–æ–¥—É –∏ –∫–æ—Ñ–µ ‚òï"),
    ("09:30", "–î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ üå¨Ô∏è"),
    ("09:45", "–û—Å–≤–µ–∂–∞—é—â–∏–π –¥—É—à üöø"),
    ("10:15", "–ì–æ—Ç–æ–≤—å –∑–∞–≤—Ç—Ä–∞–∫ üç≥"),
    ("11:00", "–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ üíª"),
    ("13:00", "–ü–µ—Ä–µ—Ä—ã–≤, –∫—É—à–∞–µ–º –∏–ª–∏ –≥–æ—Ç–æ–≤–∏–º üçΩÔ∏è"),
    ("14:00", "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–µ–º üíª"),
    ("16:00", "–û—Å—Ç–∞–Ω–æ–≤–∏—Å—å, –ø–æ—Å–º–æ—Ç—Ä–∏ –ø–æ –¥—Ä—É–≥–∏–º –¥–µ–ª–∞–º üß†"),
    ("18:00", "–£—á–∏–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π üá¨üáß"),
    ("20:00", "–£–±–æ—Ä–∫–∞, –µ–¥–∞, –∫–æ—à–∞—á–∏–π –ª–æ—Ç–æ–∫ üßπüê±"),
    ("22:30", "–í—Ä–µ–º—è –Ω–∞ –∫–∏–Ω–æ, YouTube –∏–ª–∏ –∏–≥—Ä—ã üéÆ")
]

# === –•–µ–ª–ø–µ—Ä—ã ===
def send_task(user_id, task_time, task_text):
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done|{task_time}"),
        InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ", callback_data=f"missed|{task_time}")
    )
    bot.send_message(user_id, f"üïí {task_time}\n{task_text}", reply_markup=markup)


# === –ö–æ–º–∞–Ω–¥—ã ===
@bot.message_handler(commands=['start'])
def start(message):
    global CHAT_ID
    CHAT_ID = message.chat.id
    cursor.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (CHAT_ID,))
    conn.commit()
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Å–∞–º–æ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –ë—É–¥—É —Å–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è.")

@bot.message_handler(commands=['profile'])
def profile(message):
    user_id = message.chat.id
    today = datetime.date.today().isoformat()
    cursor.execute("SELECT xp FROM users WHERE user_id=?", (user_id,))
    xp = cursor.fetchone()[0]

    cursor.execute("SELECT task_time FROM task_results WHERE user_id=? AND date=? AND status IS NULL", (user_id, today))
    pending_tasks = [row[0] for row in cursor.fetchall()]

    response = f"üìä –ü—Ä–æ—Ñ–∏–ª—å:\n–û–ø—ã—Ç: {xp} XP\n–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –Ω–µ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ:\n" + "\n".join(pending_tasks) if pending_tasks else "–í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! üî•"
    bot.send_message(user_id, response)


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = call.from_user.id
    action, task_time = call.data.split("|")
    today = datetime.date.today().isoformat()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –ª–∏ –æ—Ç–º–µ—á–µ–Ω–æ
    cursor.execute("SELECT status FROM task_results WHERE user_id=? AND task_time=? AND date=?", (user_id, task_time, today))
    result = cursor.fetchone()
    if result and result[0] is not None:
        bot.answer_callback_query(call.id, "–£–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ")
        return

    status = "done" if action == "done" else "missed"
    cursor.execute("INSERT OR REPLACE INTO task_results (user_id, task_time, status, date) VALUES (?, ?, ?, ?)",
                   (user_id, task_time, status, today))

    if status == "done":
        cursor.execute("UPDATE users SET xp = xp + 10 WHERE user_id=?", (user_id,))

    conn.commit()
    bot.answer_callback_query(call.id, "–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ " + ("–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" if status == "done" else "–ø—Ä–æ–ø—É—â–µ–Ω–æ"))


# === –û—Ç—á—ë—Ç –≤ –∫–æ–Ω—Ü–µ –¥–Ω—è ===
def send_daily_report():
    while True:
        now = datetime.datetime.now()
        if now.hour == 23 and now.minute == 59:
            today = datetime.date.today().isoformat()
            cursor.execute("SELECT user_id FROM users")
            for (user_id,) in cursor.fetchall():
                cursor.execute("SELECT COUNT(*) FROM task_results WHERE user_id=? AND date=? AND status='done'", (user_id, today))
                done = cursor.fetchone()[0]
                cursor.execute("SELECT COUNT(*) FROM task_results WHERE user_id=? AND date=?", (user_id, today))
                total = cursor.fetchone()[0] or len(tasks)
                bot.send_message(user_id, f"üìÖ –û—Ç—á—ë—Ç –∑–∞ {today}: –≤—ã–ø–æ–ª–Ω–µ–Ω–æ {done} –∏–∑ {total} –∑–∞–¥–∞—á. –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™")
            time.sleep(60)
        time.sleep(30)


# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á ===
def scheduler():
    while True:
        now = datetime.datetime.now().strftime("%H:%M")
        today = datetime.date.today().isoformat()
        for task_time, task_text in tasks:
            if now == task_time:
                cursor.execute("SELECT user_id FROM users")
                for (user_id,) in cursor.fetchall():
                    cursor.execute("INSERT OR IGNORE INTO task_results (user_id, task_time, status, date) VALUES (?, ?, NULL, ?)",
                                   (user_id, task_time, today))
                    conn.commit()
                    send_task(user_id, task_time, task_text)
        time.sleep(60)

# === –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö ===
threading.Thread(target=scheduler, daemon=True).start()
threading.Thread(target=send_daily_report, daemon=True).start()

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.polling(none_stop=True)
